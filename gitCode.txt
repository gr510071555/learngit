//创建版本库
1、mkdir xx
2、cd xx
3、pwd //显示当前目录

//变成git仓库
git init

//添加文件到管理库
1、git add
2、git commit -m '本次提交的说明'


//查看文件状态指令
1、git status //查看文件当前状态
2、git diff   //查看文件做了什么修改


//版本回退
1、git log --pretty=oneline  //查看提交历史记录，显示最近到最远的提交日志，以便确定回退到哪个版本
2、git reset --hard HEAD^  //HEAD 表示当前版本，HEAD^回退到上一个版本，HEAD^^回退到上上个版本，回退到上100个版本 HEAD~100
3、git reflog   //查看命令历史，以便确定回到未来哪个版本

//撤销修改
git checkout -- file //丢弃工作区的修改
git reset HEAD file  //把暂存区的修改撤销掉

//删除文件
git rm file 

//提交代码到github远程库
git remote add origin git@server-name:path/repo-name.git //关联远程库
git push -u origin master //第一次提交
git push origin master  //之后提交

//克隆仓库
git clone

//创建分支
git checkout -b //创建并切换分支
git branch    //查看当前分支

//合并分支
git merge  //合并指定分支到当前分支
git merge --no-ff  //用普通模式合并，合并后的历史有分支，可以看出曾经有合并 

//删除分支
git branch -d //删除分支
git branch -D //强行删除分支

//查看分支合并图
git log --graph

//储存工作现场
git stash  //储存工作现场
git stash pop //恢复工作现场同时删除stash内容
git statsh apply //恢复工作现场，但不删除stash内容

//查看远程库信息
git remote
git remote -v //显示更详细的远程信息

//多人协作
git pull  //抓取远程的新提交
git checkout branch -b branch-name origin/branch-name //在本地创建和远程分支对应的分支
git branch --set-upstream branch-name origin/branch-name  //建立本地分支和远程分支的关联

//添加标签
git tag <name> //添加一个新标签
git tag  //查看所有标签

